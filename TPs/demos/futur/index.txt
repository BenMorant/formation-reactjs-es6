Hooks:
Mixins ou HOC => poubelle ! https://cdn-images-1.medium.com/max/1000/1*SU5_ws88Kh_Oio_L4Myhvg.png
useState https://reactjs.org/docs/hooks-state.html#recap
useEffect
    - componentDidMount
    - componentDidUpdate
    - (componentWillUnmount) https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1
        - appelé avant useEffect
        - appelé avant unmount
useContext https://reactjs.org/docs/hooks-reference.html#usecontext

Concurrent React includes features like Time Slicing and React Suspense

React Suspense is a generic way for components to suspend rendering while they load data from a cache.
Cache implementations are independent of React Suspense;
    - the React team maintains a reference implementation called react-cache that also supports key-based invalidation and preloading but they are not strictly necessary for React Suspense to work.
    - react lazy

Time Slicing is a generic way to ensure that high-priority updates don’t get blocked by a low-priority update.
    - High Priority: Updates involving user input (e.g. text inputs)
    - Low Priority: Updates involving data loading or expensive calculation
    - Concurrent React sets priorities for you by default.
    - If you use React to listen to events (e.g on*), it will already pick the appropriate priority when you enqueue a state change (e.g a onKeyDown will be high priority and a onMouseOver low pri)

